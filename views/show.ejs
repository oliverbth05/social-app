<% include partials/header %>

<div class = 'container'>
    
    <input type = 'hidden' value = '<%=canLike%>'  id = 'canLike' readonly />
    <input type = 'hidden' value = '<%=canPin%>'  id = 'canPin' readonly />
    <input type = 'hidden' value = '<%=post._id%>'  id = 'post_id' readonly />
    <input type = 'hidden' value = '<%=user._id%>'  id = 'user_id' readonly />
    <input type = 'hidden' value = '<%=post.title%>' id = 'post_title' readonly />
    <input type = 'hidden' value = '<%=user.first_name%> <%=user.last_name%>'  id = 'user_name' readonly />
    <input type = 'hidden' value = '<%=post.likes.length%>' id = 'likes' readonly />
    
    <a class = 'button m-b-1' onclick = 'window.history.back()'><i class="fas fa-chevron-circle-left"></i> Go Back</a>
    <div class = 'box m-b-1'>
        <img class = 'avatar' src = 'https://api.adorable.io/avatars/130/<%=post.user_name%>.png' />
        <a href = '/user/<%=post.user_id%>' class = 'text-center font-normal m-b-2'><%=post.user_name%></a>
        <h3 class = 'm-b-1 text-center'><%=post.title%></h3>
        <p class = 'm-b-1'><%=post.body%></p>
        <p><%=post.date%></p>
    </div>
    
    <% if (isUser) { %>
        <button class = 'button m-b-1'><i class="fas fa-edit"></i> Edit Post</button>
    <% } %>
    
    <div class = 'box' id = 'root'></div> <!-- React Mounting Point -->
    
    <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
    <script src="https://unpkg.com/react@16/umd/react.development.js" crossorigin></script>
    <script src="https://unpkg.com/react-dom@16/umd/react-dom.development.js" crossorigin></script>
    <script crossorigin src='https://cdnjs.cloudflare.com/ajax/libs/axios/0.18.0/axios.min.js'></script>
    
    <script type = 'text/babel'>

    class App extends React.Component {
        
        state = {
            comments: [],
            comments_loading: true,
            like_loading: false,
            pin_loading: false,
            commentField: '',
            canLike: JSON.parse(document.getElementById('canLike').value),
            canPin: JSON.parse(document.getElementById('canPin').value),
            likes: JSON.parse(document.getElementById('likes').value),
            post_id: document.getElementById('post_id').value,
            post_title: document.getElementById('post_title').value,
            user_id: document.getElementById('user_id').value,
            user_name: document.getElementById('user_name').value
        }
        
        componentDidMount() {
            axios.get('/show/' + this.state.post_id + '/comments')
            .then(response => {
                this.setState({
                    comments: response.data,
                    comments_loading: false
                })
            })
            .catch(err => {
                
            })
        }
        
        
        
        inputHandler(e) {
            this.setState({
                [e.target.name] : e.target.value
            })
        }
        
        
        
        likePost() {
            if (!this.state.canLike) {
                return
            }
            this.setState({
                like_loading: true
            })
            axios.post('/show/' + post_id + '/like', {
                user_id : this.state.user_id,
                post_id : this.state.post_id
            })
            .then(response => {
                this.setState({
                    likes : this.state.likes + 1,
                    canLike : false,
                    like_loading: false
                })
            })
            .catch(err => {
                console.log(err)
            })
        }
        
        
        
        pinPost() {
            if (!this.state.canPin) {
                return
            }
            this.setState({
                pin_loading: true
            })
            axios.post('/show/' + post_id + '/pin', {
                user_id : this.state.user_id,
                post_id : this.state.post_id,
                post_title : this.state.post_title
            })
            .then(response => {
                this.setState({
                    canPin : false,
                    pin_loading: false
                })
            })
            .catch(err => {
                console.log(err)
            })
        }
        
        

        postComment(e) {
            e.preventDefault();
            if (!this.state.commentField) {
                return
            }

            var data = {
                body : this.state.commentField,
                post_id : this.state.post_id,
                user_id : this.state.user_id,
                user_name : this.state.user_name
            }
            console.log(data)
            this.setState({
                comments_loading: true,
                commentField: ''
            })
            axios.post('/show/' + post_id + '/comment', data)
            .then(response => {
            console.log(response.data)
                this.setState({
                    comments: this.state.comments.concat(response.data),
                    comments_loading: false
                })
            })
            .catch(err => {
                
            })
        }
        
        
        
        render() {
            if(this.state.comments_loading) {
                return <div className = 'loader'></div>
            }
            
            else {
                var commentsMapped;
                if (this.state.comments.length > 0) {
                        commentsMapped = this.state.comments.map(comment => {
                            return <Comment {...comment} key = {comment._id} />
                        })
                }
                else {
                    commentsMapped = <p>No Comments</p>
                }
                return (
                    <div>
                        <div className = 'm-b-2'>
                            <span><i className="far fa-eye"></i> <%=post.views%>  </span>
                            <span><i className="far fa-thumbs-up"></i> {this.state.likes} </span>
                            <br />
                           
                            <Button disabledText = {'Liked'} onClick = {this.likePost.bind(this)} disabled = {!this.state.canLike} loading = {this.state.like_loading}><i class="far fa-thumbs-up"></i> Like </Button>
                            <Button disabledText = {'Pinned'} onClick = {this.pinPost.bind(this)} disabled = {!this.state.canPin} loading = {this.state.pin_loading}><i class="fas fa-map-pin"></i> Pin </Button>
                         
                        </div>
                        <h3 class = 'font-normal'>Comments</h3>
                        <form className = 'm-b-1' onSubmit = {this.postComment.bind(this)}>
                            <input className = 'input-small m-r-s' name = 'commentField' onChange = {this.inputHandler.bind(this)} value = {this.state.commentField}/>
                            <button className = 'button'>Submit</button>
                        </form>
                        {commentsMapped}
                    </div>
                )
            }
        }
    }
    
    //<---------------------------------------------COMPONENTS--------------------------------------------------------------------->//

    const Comment = (props) => {
        return (
            <div className = 'comment'>
                <div class = 'comment__top'>
                    <img className = 'comment__avatar' src = {'https://api.adorable.io/avatars/130/' + props.user_name + '.png'} />
                    <p className = 'comment__body'>{props.body}</p>
                </div>
                
                <div className = 'comment__info'>
                    <a href = {'/user/' + props.user_id}>{props.user_name}</a>
                    <p>{props.date}</p>
                </div>
            </div>
        )
    }

    const Button = (props) => { 
        if (props.loading) {
            return <button className = 'button m-r-s'><div className = 'loader-button'></div></button>
        }
        else if (props.disabled && !props.loading){
            return <span className = 'color-primary'><i className="fas fa-check-circle"></i> {props.disabledText} </span>
            // return <button className = 'button m-r-s'><i className="fas fa-check-circle"></i> {props.disabledText}</button>
        }
        else {
            return <button onClick = {() => {props.onClick()}} className = 'button m-r-s'>{props.children}</button>
        }
    }

    //Button that shows a loading state, and a completed state.

    // Has three states 
    //     1. Able to click
    //     2. Loading 
    //     3. Already Clicked (disabled)

    // Props
    //     1. loading | Boolean
    //     2. disabled | Boolean
    //     3. innerText | String
    //     4. disabledText | String
    //     5. onClick function | Function
    
    //<------------------------------------------------------------------------------------------------------------------------------>//
    
    ReactDOM.render(<App></App>, document.getElementById('root'))
    
    </script>
  
 
</div>    
    
<% include partials/footer %>